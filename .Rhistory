use_pipe()
arch_extract <- function(police_force = ".", data_series = ".", month_min = ".", month_max = ".") {
op <- archive_contents %>%
filter(police == police_force, series == data_series) %>%
mutate(year_month = paste(year, month, sep="-")) %>%
filter(year_month >= month_min,
year_month <= month_max) %>%
filter(contains == T) %>%
select(file_name, folder)
nm <- op %>%
distinct(folder)
op <- op %>%
mutate(count = 1) %>%
pivot_wider(names_from = folder,
values_from = count,
values_fill = 0)  %>%
column_to_rownames(var="file_name")
# # https://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf
# # https://stackoverflow.com/questions/39184257/set-cover-approximation-in-r
# # incidence matrix  (each row corresponds to an element and each column corresponds to a set)
solution <- lpSolve::lp("min", rep(1, ncol(op)), op, rep(">=", nrow(op)), rep(1, nrow(op)))$solution
zip_list <- op %>%
rownames_to_column("file_name") %>%
pivot_longer(!file_name,
names_to = "folder",
values_to = "present") %>%
left_join(nm %>%
cbind(solution)) %>%
filter(solution == 1) %>%
select(!solution) %>%
group_by(file_name) %>%
mutate(selected = if_else(folder == max(folder[present == 1]), 1, 0)) %>%  # select most recent
ungroup() %>%
filter(selected == 1)  %>%
select(!c(present, selected)) %>%
mutate(folder = substr(folder, 4, nchar(folder)),
folder = paste("https://data.police.uk/data/archive/", folder, ".zip", sep = "")
# ,
# file_name = paste(substr(file_name, 1, 7), file_name, sep = "/")
) %>%
# unstack(file_name ~ folder)
with(split(file_name,
factor(folder, levels = unique(folder))))
data_list <- list()
for (i in 1:length(zip_list)) {
temp <- tempfile()
download.file(names(zip_list)[i], temp)
data_list[[i]] <- bind_rows(lapply(zip_list[[i]], function(fn) read_csv(unz(temp, fn), col_types = cols(Latitude = col_double(), Longitude = col_double()))))
}
df <- bind_rows(data_list)
return(df)
}
check <- arch_extract(police_force = "west-midlands", data_series = "stop-and-search", month_min = "2015-01", month_max = "2020-08")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
arch_extract <- function(police_force = ".", data_series = ".", month_min = ".", month_max = ".") {
op <- archive_contents %>%
filter(police == police_force, series == data_series) %>%
mutate(year_month = paste(year, month, sep="-")) %>%
filter(year_month >= month_min,
year_month <= month_max) %>%
filter(contains == T) %>%
select(file_name, folder)
nm <- op %>%
distinct(folder)
op <- op %>%
mutate(count = 1) %>%
pivot_wider(names_from = folder,
values_from = count,
values_fill = 0)  %>%
tibble::column_to_rownames(var="file_name")
# # https://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf
# # https://stackoverflow.com/questions/39184257/set-cover-approximation-in-r
# # incidence matrix  (each row corresponds to an element and each column corresponds to a set)
solution <- lpSolve::lp("min", rep(1, ncol(op)), op, rep(">=", nrow(op)), rep(1, nrow(op)))$solution
zip_list <- op %>%
tibble::rownames_to_column("file_name") %>%
pivot_longer(!file_name,
names_to = "folder",
values_to = "present") %>%
left_join(nm %>%
cbind(solution)) %>%
filter(solution == 1) %>%
select(!solution) %>%
group_by(file_name) %>%
mutate(selected = if_else(folder == max(folder[present == 1]), 1, 0)) %>%  # select most recent
ungroup() %>%
filter(selected == 1)  %>%
select(!c(present, selected)) %>%
mutate(folder = substr(folder, 4, nchar(folder)),
folder = paste("https://data.police.uk/data/archive/", folder, ".zip", sep = "")
# ,
# file_name = paste(substr(file_name, 1, 7), file_name, sep = "/")
) %>%
# unstack(file_name ~ folder)
with(split(file_name,
factor(folder, levels = unique(folder))))
data_list <- list()
for (i in 1:length(zip_list)) {
temp <- tempfile()
download.file(names(zip_list)[i], temp)
data_list[[i]] <- bind_rows(lapply(zip_list[[i]], function(fn) readr::read_csv(unz(temp, fn), col_types = cols(Latitude = col_double(), Longitude = col_double()))))
}
df <- bind_rows(data_list)
return(df)
}
check <- arch_extract(police_force = "west-midlands", data_series = "stop-and-search", month_min = "2015-01", month_max = "2020-08")
devtools::document()
pkgload::dev_help('%>%')
return(df)
arch_extract <- function(police_force = ".", data_series = ".", month_min = ".", month_max = ".") {
op <- archive_contents %>%
filter(police == police_force, series == data_series) %>%
mutate(year_month = paste(year, month, sep="-")) %>%
filter(year_month >= month_min,
year_month <= month_max) %>%
filter(contains == T) %>%
select(file_name, folder)
nm <- op %>%
distinct(folder)
op <- op %>%
mutate(count = 1) %>%
pivot_wider(names_from = folder,
values_from = count,
values_fill = 0)  %>%
tibble::column_to_rownames(var="file_name")
# # https://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf
# # https://stackoverflow.com/questions/39184257/set-cover-approximation-in-r
# # incidence matrix  (each row corresponds to an element and each column corresponds to a set)
solution <- lpSolve::lp("min", rep(1, ncol(op)), op, rep(">=", nrow(op)), rep(1, nrow(op)))$solution
zip_list <- op %>%
tibble::rownames_to_column("file_name") %>%
pivot_longer(!file_name,
names_to = "folder",
values_to = "present") %>%
left_join(nm %>%
cbind(solution)) %>%
filter(solution == 1) %>%
select(!solution) %>%
group_by(file_name) %>%
mutate(selected = if_else(folder == max(folder[present == 1]), 1, 0)) %>%  # select most recent
ungroup() %>%
filter(selected == 1)  %>%
select(!c(present, selected)) %>%
mutate(folder = substr(folder, 4, nchar(folder)),
folder = paste("https://data.police.uk/data/archive/", folder, ".zip", sep = "")
# ,
# file_name = paste(substr(file_name, 1, 7), file_name, sep = "/")
) %>%
# unstack(file_name ~ folder)
with(split(file_name,
factor(folder, levels = unique(folder))))
data_list <- list()
for (i in 1:length(zip_list)) {
temp <- tempfile()
download.file(names(zip_list)[i], temp)
data_list[[i]] <- bind_rows(lapply(zip_list[[i]], function(fn) readr::read_csv(unz(temp, fn), col_types = cols(Latitude = col_double(), Longitude = col_double()))))
}
df <- bind_rows(data_list)
return(df)
}
check <- arch_extract(police_force = "west-midlands", data_series = "stop-and-search", month_min = "2015-01", month_max = "2020-08")
arch_extract <- function(police_force = ".", data_series = ".", month_min = ".", month_max = ".") {
op <- archive_contents %>%
filter(police == police_force, series == data_series) %>%
mutate(year_month = paste(year, month, sep="-")) %>%
filter(year_month >= month_min,
year_month <= month_max) %>%
filter(contains == T) %>%
select(file_name, folder)
nm <- op %>%
distinct(folder)
op <- op %>%
mutate(count = 1) %>%
pivot_wider(names_from = folder,
values_from = count,
values_fill = 0)  %>%
tibble::column_to_rownames(var="file_name")
# # https://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf
# # https://stackoverflow.com/questions/39184257/set-cover-approximation-in-r
# # incidence matrix  (each row corresponds to an element and each column corresponds to a set)
solution <- lpSolve::lp("min", rep(1, ncol(op)), op, rep(">=", nrow(op)), rep(1, nrow(op)))$solution
zip_list <- op %>%
tibble::rownames_to_column("file_name") %>%
pivot_longer(!file_name,
names_to = "folder",
values_to = "present") %>%
left_join(nm %>%
cbind(solution)) %>%
filter(solution == 1) %>%
select(!solution) %>%
group_by(file_name) %>%
mutate(selected = if_else(folder == max(folder[present == 1]), 1, 0)) %>%  # select most recent
ungroup() %>%
filter(selected == 1)  %>%
select(!c(present, selected)) %>%
mutate(folder = substr(folder, 4, nchar(folder)),
folder = paste("https://data.police.uk/data/archive/", folder, ".zip", sep = "")
# ,
# file_name = paste(substr(file_name, 1, 7), file_name, sep = "/")
) %>%
# unstack(file_name ~ folder)
with(split(file_name,
factor(folder, levels = unique(folder))))
data_list <- list()
for (i in 1:length(zip_list)) {
temp <- tempfile()
download.file(names(zip_list)[i], temp)
data_list[[i]] <- bind_rows(lapply(zip_list[[i]], function(fn) readr::read_csv(unz(temp, fn), col_types = readr::cols(Latitude = col_double(), Longitude = col_double()))))
}
df <- bind_rows(data_list)
return(df)
}
check <- arch_extract(police_force = "west-midlands", data_series = "stop-and-search", month_min = "2015-01", month_max = "2020-08")
arch_extract <- function(police_force = ".", data_series = ".", month_min = ".", month_max = ".") {
op <- archive_contents %>%
filter(police == police_force, series == data_series) %>%
mutate(year_month = paste(year, month, sep="-")) %>%
filter(year_month >= month_min,
year_month <= month_max) %>%
filter(contains == T) %>%
select(file_name, folder)
nm <- op %>%
distinct(folder)
op <- op %>%
mutate(count = 1) %>%
pivot_wider(names_from = folder,
values_from = count,
values_fill = 0)  %>%
tibble::column_to_rownames(var="file_name")
# # https://math.mit.edu/~goemans/18434S06/setcover-tamara.pdf
# # https://stackoverflow.com/questions/39184257/set-cover-approximation-in-r
# # incidence matrix  (each row corresponds to an element and each column corresponds to a set)
solution <- lpSolve::lp("min", rep(1, ncol(op)), op, rep(">=", nrow(op)), rep(1, nrow(op)))$solution
zip_list <- op %>%
tibble::rownames_to_column("file_name") %>%
pivot_longer(!file_name,
names_to = "folder",
values_to = "present") %>%
left_join(nm %>%
cbind(solution)) %>%
filter(solution == 1) %>%
select(!solution) %>%
group_by(file_name) %>%
mutate(selected = if_else(folder == max(folder[present == 1]), 1, 0)) %>%  # select most recent
ungroup() %>%
filter(selected == 1)  %>%
select(!c(present, selected)) %>%
mutate(folder = substr(folder, 4, nchar(folder)),
folder = paste("https://data.police.uk/data/archive/", folder, ".zip", sep = "")
# ,
# file_name = paste(substr(file_name, 1, 7), file_name, sep = "/")
) %>%
# unstack(file_name ~ folder)
with(split(file_name,
factor(folder, levels = unique(folder))))
data_list <- list()
for (i in 1:length(zip_list)) {
temp <- tempfile()
download.file(names(zip_list)[i], temp)
data_list[[i]] <- bind_rows(lapply(zip_list[[i]], function(fn) readr::read_csv(unz(temp, fn), col_types = readr::cols(Latitude = readr::col_double(), Longitude = readr::col_double()))))
}
df <- bind_rows(data_list)
return(df)
}
check <- arch_extract(police_force = "west-midlands", data_series = "stop-and-search", month_min = "2015-01", month_max = "2020-08")
View(archive_contents)
devtools::document()
load("data/archive_contents.rda")
# lets do ever, always, mever
archive_contents %>%
mutate(year_month = paste(year, month, sep="-")) %>%
group_by(folder) %>%
mutate(folder_min = min(year_month[contains == T]),
folder_max = max(year_month[contains == T])) %>%
ungroup() %>%
mutate(should_contain = ifelse(year_month >= folder_min & year_month <= folder_max,
T, F)) %>%
filter(should_contain == T) %>%
group_by(file_name) %>%
mutate(file_present = if_else(all(contains == T), "never missing.", if_else(all(contains == F), "always missing;", "sometimes missing;"))) %>%
mutate(file_present = factor(file_present, levels = c("always missing;", "sometimes missing;", "never missing."))) %>%
ungroup() %>%
distinct(series, police, file_name, file_present) %>%
mutate(year_month = substr(file_name, 1, 7),
series = factor(series, levels = c("street", "outcomes", "stop-and-search"))) %>%
left_join(force_list %>%
rename(police = id)) %>%
mutate(police_label = ifelse(police == "metropolitan" & series == "stop-and-search", name, paste0(name, 'no_display')),
police_label = ifelse(police == "avon-and-somerset" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "cheshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "derbyshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "greater-manchester" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "west-midlands" & series == "stop-and-search", name, police_label)) %>%
# mutate(police_label = ifelse(series == "street", name, paste0(name, 'no_display'))) %>%
ggplot() +
geom_tile(aes(x = year_month, y = forcats::fct_rev(police_label), fill = file_present),
colour = "white") +
facet_wrap(~series, ncol = 1, scale = 'free_y',
labeller = as_labeller(c(street = "Street",
outcomes = "Outcomes",
`stop-and-search` = "Stop & search")),
strip.position = "left"
) +
# scale_fill_manual(values = c("#20c45b", "#fc4724", "#fc7d24"))+
scale_fill_manual(values = c("#adabaa", "#fc7d24", "#fc4724"))+
scale_x_discrete(name = "",
breaks = c("2011-01", "2012-01", "2013-01",
"2014-01", "2015-01", "2016-01", "2017-01", "2018-01",
"2019-01", "2020-01", "2021-01", "2022-01",
"2023-01", "2024-01"),
labels = c("2011", "2012", "2013",
"2014", "2015", "2016", "2017", "2018",
"2019", "2020", "2021", "2022",
"2023", "2024"),
expand = c(0,0)) +
scale_y_discrete(position = "right",
name = "",
labels = delete_no_display,
breaks = delete_no_display,
# labels = "",
expand = c(0,0)) +
theme(strip.background = element_blank(),
# strip.text = element_text(angle = 0, hjust = 0),
# strip.placement = "outside",
plot.background = element_rect(fill = "white"),
legend.background =  element_blank(),
axis.line.x.bottom = element_line(colour = "black"),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", linewidth = 0.4),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.932, -0.13),
legend.title = element_blank(),
legend.key.size = unit(0.5, "lines"),
legend.text = element_text(size = 10),
# panel.background = element_rect(fill = NA, color = "black"),
# plot.margin = unit(c(1,9,0.7,0.8), "lines"),
# plot.caption = element_text(hjust=1.137,
#                             vjust = 100,
#                             size=rel(1)),
plot.caption = element_text(hjust=0,
vjust=0,
size=10),
panel.spacing = unit(0.1,'lines')) +   #only v small spaces between facets
guides(fill=guide_legend(nrow = 1)) +
# coord_cartesian(clip="off") +
labs(caption = "Each tile represents one month of data from one (of three) data series and one police force. The colour of the tile indictates\nwhether the data is present or absent in the folders it should be in:")
# lets do ever, always, mever
archive_contents %>%
mutate(year_month = paste(year, month, sep="-")) %>%
group_by(folder) %>%
mutate(folder_min = min(year_month[contains == T]),
folder_max = max(year_month[contains == T])) %>%
ungroup() %>%
mutate(should_contain = ifelse(year_month >= folder_min & year_month <= folder_max,
T, F)) %>%
filter(should_contain == T) %>%
group_by(file_name) %>%
mutate(file_present = if_else(all(contains == T), "never missing.", if_else(all(contains == F), "always missing;", "sometimes missing;"))) %>%
mutate(file_present = factor(file_present, levels = c("always missing;", "sometimes missing;", "never missing."))) %>%
ungroup() %>%
distinct(series, police, file_name, file_present) %>%
mutate(year_month = substr(file_name, 1, 7),
series = factor(series, levels = c("street", "outcomes", "stop-and-search"))) %>%
left_join(force_list %>%
rename(police = id)) %>%
mutate(police_label = ifelse(police == "metropolitan" & series == "stop-and-search", name, paste0(name, 'no_display')),
police_label = ifelse(police == "avon-and-somerset" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "cheshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "derbyshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "greater-manchester" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "west-midlands" & series == "stop-and-search", name, police_label)) %>%
# mutate(police_label = ifelse(series == "street", name, paste0(name, 'no_display'))) %>%
ggplot() +
geom_tile(aes(x = year_month, y = forcats::fct_rev(police_label), fill = file_present),
colour = "white") +
facet_wrap(~series, ncol = 1, scale = 'free_y',
labeller = as_labeller(c(street = "Street",
outcomes = "Outcomes",
`stop-and-search` = "Stop & search")),
strip.position = "left"
) +
# scale_fill_manual(values = c("#20c45b", "#fc4724", "#fc7d24"))+
scale_fill_manual(values = c("#adabaa", "#fc7d24", "#fc4724"))+
scale_x_discrete(name = "",
breaks = c("2011-01", "2012-01", "2013-01",
"2014-01", "2015-01", "2016-01", "2017-01", "2018-01",
"2019-01", "2020-01", "2021-01", "2022-01",
"2023-01", "2024-01"),
labels = c("2011", "2012", "2013",
"2014", "2015", "2016", "2017", "2018",
"2019", "2020", "2021", "2022",
"2023", "2024"),
expand = c(0,0)) +
scale_y_discrete(position = "right",
name = "",
labels = delete_no_display,
breaks = delete_no_display,
# labels = "",
expand = c(0,0)) +
theme(strip.background = element_blank(),
# strip.text = element_text(angle = 0, hjust = 0),
# strip.placement = "outside",
plot.background = element_rect(fill = "white"),
legend.background =  element_blank(),
axis.line.x.bottom = element_line(colour = "black"),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", linewidth = 0.4),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.932, -0.18),
legend.title = element_blank(),
legend.key.size = unit(0.5, "lines"),
legend.text = element_text(size = 10),
# panel.background = element_rect(fill = NA, color = "black"),
# plot.margin = unit(c(1,9,0.7,0.8), "lines"),
# plot.caption = element_text(hjust=1.137,
#                             vjust = 100,
#                             size=rel(1)),
plot.caption = element_text(hjust=0,
vjust=0,
size=10),
panel.spacing = unit(0.1,'lines')) +   #only v small spaces between facets
guides(fill=guide_legend(nrow = 1)) +
# coord_cartesian(clip="off") +
labs(caption = "Each tile represents one month of data from one (of three) data series and one police force. The colour of\nthe tile indictates whether the data is present or absent in the folders it should be in:")
# lets do ever, always, mever
archive_contents %>%
mutate(year_month = paste(year, month, sep="-")) %>%
group_by(folder) %>%
mutate(folder_min = min(year_month[contains == T]),
folder_max = max(year_month[contains == T])) %>%
ungroup() %>%
mutate(should_contain = ifelse(year_month >= folder_min & year_month <= folder_max,
T, F)) %>%
filter(should_contain == T) %>%
group_by(file_name) %>%
mutate(file_present = if_else(all(contains == T), "never missing.", if_else(all(contains == F), "always missing;", "sometimes missing;"))) %>%
mutate(file_present = factor(file_present, levels = c("always missing;", "sometimes missing;", "never missing."))) %>%
ungroup() %>%
distinct(series, police, file_name, file_present) %>%
mutate(year_month = substr(file_name, 1, 7),
series = factor(series, levels = c("street", "outcomes", "stop-and-search"))) %>%
left_join(force_list %>%
rename(police = id)) %>%
mutate(police_label = ifelse(police == "metropolitan" & series == "stop-and-search", name, paste0(name, 'no_display')),
police_label = ifelse(police == "avon-and-somerset" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "cheshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "derbyshire" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "greater-manchester" & series == "stop-and-search", name, police_label),
police_label = ifelse(police == "west-midlands" & series == "stop-and-search", name, police_label)) %>%
# mutate(police_label = ifelse(series == "street", name, paste0(name, 'no_display'))) %>%
ggplot() +
geom_tile(aes(x = year_month, y = forcats::fct_rev(police_label), fill = file_present),
colour = "white") +
facet_wrap(~series, ncol = 1, scale = 'free_y',
labeller = as_labeller(c(street = "Street",
outcomes = "Outcomes",
`stop-and-search` = "Stop & search")),
strip.position = "left"
) +
# scale_fill_manual(values = c("#20c45b", "#fc4724", "#fc7d24"))+
scale_fill_manual(values = c("#adabaa", "#fc7d24", "#fc4724"))+
scale_x_discrete(name = "",
breaks = c("2011-01", "2012-01", "2013-01",
"2014-01", "2015-01", "2016-01", "2017-01", "2018-01",
"2019-01", "2020-01", "2021-01", "2022-01",
"2023-01", "2024-01"),
labels = c("2011", "2012", "2013",
"2014", "2015", "2016", "2017", "2018",
"2019", "2020", "2021", "2022",
"2023", "2024"),
expand = c(0,0)) +
scale_y_discrete(position = "right",
name = "",
labels = delete_no_display,
breaks = delete_no_display,
# labels = "",
expand = c(0,0)) +
theme(strip.background = element_blank(),
# strip.text = element_text(angle = 0, hjust = 0),
# strip.placement = "outside",
plot.background = element_rect(fill = "white"),
legend.background =  element_blank(),
axis.line.x.bottom = element_line(colour = "black"),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color = "darkgrey", linewidth = 0.4),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
legend.position = c(0.64, -0.25),
legend.title = element_blank(),
legend.key.size = unit(0.5, "lines"),
legend.text = element_text(size = 12),
# panel.background = element_rect(fill = NA, color = "black"),
# plot.margin = unit(c(1,9,0.7,0.8), "lines"),
# plot.caption = element_text(hjust=1.137,
#                             vjust = 100,
#                             size=rel(1)),
plot.caption = element_text(hjust=0,
vjust=0,
size=12),
panel.spacing = unit(0.1,'lines')) +   #only v small spaces between facets
guides(fill=guide_legend(nrow = 1)) +
# coord_cartesian(clip="off") +
labs(caption = "Each tile represents one month of data from one (of three) data series and one police force. \nThe colour of the tile indictates whether the data is present or absent in the folders it\nshould be in:")
View(archive_contents)
